class Solution {
    public ArrayList<ArrayList<Integer>> getComponents(int V, int[][] edges) 
    {
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<V;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int[] edge:edges)
        {
            int u=edge[0];
            int v=edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        boolean visited[]=new boolean[V];
        ArrayList<ArrayList<Integer>>res=new ArrayList<>();
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                ArrayList<Integer>l=bfs(i,adj,visited);
                res.add(l);
            }
        }
        return res;
    }
    private ArrayList<Integer> bfs(int start, ArrayList<ArrayList<Integer>> adj, boolean[] visited) 
    {
        ArrayList<Integer> component = new ArrayList<>();
        Queue<Integer> queue = new ArrayDeque<>();
        queue.add(start);
        visited[start] = true;
        while (!queue.isEmpty()) 
        {
            int node = queue.poll();
            component.add(node);
            for (int neighbor : adj.get(node)) 
            {
                if (!visited[neighbor]) 
                {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        return component;
    }