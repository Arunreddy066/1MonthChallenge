import java.util.*;

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> list = new ArrayList<>();
        permutation(nums, list, 0);
        return list;
    }

    public static void permutation(int[] nums, List<List<Integer>> list, int i) {
        if (i == nums.length) {
            List<Integer> temp = new ArrayList<>();
            for (int num : nums) {
                temp.add(num);
            }
            list.add(new ArrayList<>(temp)); // add a copy
            return;
        }

        for (int idx = i; idx < nums.length; idx++) {
            swap(nums, idx, i);
            permutation(nums, list, i + 1);
            swap(nums, idx, i); // backtrack
        }
    }

    public static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
